library(tidyverse)
library(tidyverse)
#Sample size
n_per_group <- 50
pop_es <- seq(from = 0, to = 0.8, length.out = 30) #creates sequences of numbers.
#Container power
powerValue <- NULL
for(es in pop_es){
#Container pvalues
pvalues <- NULL
for(i in 1:1000){
group1 <- rnorm(n = n_per_group, mean = 0, sd = 1)
group2 <- rnorm(n = n_per_group, mean = es, sd = 1)
score <- c(group1, group2)
groupID <- rep(c("gr1", "gr2"), each = n_per_group)
MyData <- data.frame(groupID, score)
t_model <- t.test(score ~ groupID, data = MyData)
pvalues <- c(pvalues, tidy(t_model)$p.value[1])
}
#Power
powerValue <- c(powerValue, sum(pvalues <= 0.05)/length(pvalues))
}
#Sample size
n_per_group <- 50
pop_es <- seq(from = 0, to = 0.8, length.out = 30) #creates sequences of numbers.
#Container power
powerValue <- NULL
for(es in pop_es){
#Container pvalues
pvalues <- NULL
for(i in 1:1000){
group1 <- rnorm(n = n_per_group, mean = 0, sd = 1)
group2 <- rnorm(n = n_per_group, mean = es, sd = 1)
score <- c(group1, group2)
groupID <- rep(c("gr1", "gr2"), each = n_per_group)
MyData <- data.frame(groupID, score)
t_model <- t.test(score ~ groupID, data = MyData)
pvalues <- c(pvalues, tidy(t_model)$p.value[1])
}
#Power
powerValue <- c(powerValue, sum(pvalues <= 0.05)/length(pvalues))
}
MyDataPower <- data.frame(pop_es, powerValue)
library(tidyverse)
#Sample size
n_per_group <- 50
pop_es <- seq(from = 0, to = 0.8, length.out = 30) #creates sequences of numbers.
#Container power
powerValue <- NULL
for(es in pop_es){
#Container pvalues
pvalues <- NULL
for(i in 1:1000){
group1 <- rnorm(n = n_per_group, mean = 0, sd = 1)
group2 <- rnorm(n = n_per_group, mean = es, sd = 1)
score <- c(group1, group2)
groupID <- rep(c("gr1", "gr2"), each = n_per_group)
MyData <- data.frame(groupID, score)
t_model <- t.test(score ~ groupID, data = MyData)
pvalues <- c(pvalues, tidy(t_model)$p.value[1])
}
#Power
powerValue <- c(powerValue, sum(pvalues <= 0.05)/length(pvalues))
}
MyDataPower <- data.frame(pop_es, powerValue)
library(broom)
#Sample size
n_per_group <- 50
pop_es <- seq(from = 0, to = 0.8, length.out = 30) #creates sequences of numbers.
#Container power
powerValue <- NULL
for(es in pop_es){
#Container pvalues
pvalues <- NULL
for(i in 1:1000){
group1 <- rnorm(n = n_per_group, mean = 0, sd = 1)
group2 <- rnorm(n = n_per_group, mean = es, sd = 1)
score <- c(group1, group2)
groupID <- rep(c("gr1", "gr2"), each = n_per_group)
MyData <- data.frame(groupID, score)
t_model <- t.test(score ~ groupID, data = MyData)
pvalues <- c(pvalues, tidy(t_model)$p.value[1])
}
#Power
powerValue <- c(powerValue, sum(pvalues <= 0.05)/length(pvalues))
}
library(tidyverse)
library(broom)
#Sample size
n_per_group <- 50
pop_es <- seq(from = 0, to = 0.8, length.out = 30) #creates sequences of numbers.
#Container power
powerValue <- NULL
for(es in pop_es){
#Container pvalues
pvalues <- NULL
for(i in 1:100){
group1 <- rnorm(n = n_per_group, mean = 0, sd = 1)
group2 <- rnorm(n = n_per_group, mean = es, sd = 1)
score <- c(group1, group2)
groupID <- rep(c("gr1", "gr2"), each = n_per_group)
MyData <- data.frame(groupID, score)
t_model <- t.test(score ~ groupID, data = MyData)
pvalues <- c(pvalues, tidy(t_model)$p.value[1])
}
#Power
powerValue <- c(powerValue, sum(pvalues <= 0.05)/length(pvalues))
}
MyDataPower <- data.frame(pop_es, powerValue)
#Plot
plot = ggplot(MyDataPower, aes(x=pop_es, y=powerValue)) +
geom_line() +
xlab("Effect Sizes")+
ylab("Power")+
theme_bw() +
geom_hline(yintercept= 0.8, linetype="dashed", color = "red") +
ggtitle("Power Curve for an Independent Sample t-test (n per group: 50)")
View(plot)
View(plot)
View(plot)
View(plot)
plot
for(i in 1:10){
group1 <- rnorm(n = n_per_group, mean = 0, sd = 1)
group2 <- rnorm(n = n_per_group, mean = es, sd = 1)
score <- c(group1, group2)
groupID <- rep(c("gr1", "gr2"), each = n_per_group)
MyData <- data.frame(groupID, score)
t_model <- t.test(score ~ groupID, data = MyData)
pvalues <- c(pvalues, tidy(t_model)$p.value[1])
}
#Power
powerValue <- c(powerValue, sum(pvalues <= 0.05)/length(pvalues))
for(es in pop_es){
#Container pvalues
pvalues <- NULL
for(i in 1:10){
group1 <- rnorm(n = n_per_group, mean = 0, sd = 1)
group2 <- rnorm(n = n_per_group, mean = es, sd = 1)
score <- c(group1, group2)
groupID <- rep(c("gr1", "gr2"), each = n_per_group)
MyData <- data.frame(groupID, score)
t_model <- t.test(score ~ groupID, data = MyData)
pvalues <- c(pvalues, tidy(t_model)$p.value[1])
}
#Power
powerValue <- c(powerValue, sum(pvalues <= 0.05)/length(pvalues))
}
MyDataPower <- data.frame(pop_es, powerValue)
#Plot
plot = ggplot(MyDataPower, aes(x=pop_es, y=powerValue)) +
geom_line() +
xlab("Effect Sizes")+
ylab("Power")+
theme_bw() +
geom_hline(yintercept= 0.8, linetype="dashed", color = "red") +
ggtitle("Power Curve for an Independent Sample t-test (n per group: 50)")
plot
library(tidyverse)
library(broom)
#Sample size
n_per_group <- 50
pop_es <- seq(from = 0, to = 0.8, length.out = 30) #creates sequences of numbers.
#Container power
powerValue <- NULL
for(es in pop_es){
#Container pvalues
pvalues <- NULL
for(i in 1:10){
group1 <- rnorm(n = n_per_group, mean = 0, sd = 1)
group2 <- rnorm(n = n_per_group, mean = es, sd = 1)
score <- c(group1, group2)
groupID <- rep(c("gr1", "gr2"), each = n_per_group)
MyData <- data.frame(groupID, score)
t_model <- t.test(score ~ groupID, data = MyData)
pvalues <- c(pvalues, tidy(t_model)$p.value[1])
}
#Power
powerValue <- c(powerValue, sum(pvalues <= 0.05)/length(pvalues))
}
MyDataPower <- data.frame(pop_es, powerValue)
#Plot
plot = ggplot(MyDataPower, aes(x=pop_es, y=powerValue)) +
geom_line() +
xlab("Effect Sizes")+
ylab("Power")+
theme_bw() +
geom_hline(yintercept= 0.8, linetype="dashed", color = "red") +
ggtitle("Power Curve for an Independent Sample t-test (n per group: 50)")
plot
install.packages('shiny')
library(shiny)
runExample("01_hello")
shiny(.)
runApp(.)
runApp('.')
runApp('.')
runApp('app')
runApp('app')
hist(x, breaks = bins, col = "orange", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
hist(x, breaks = bins, col = "orange", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
runApp('app')
runExample("02_text")
runExample("03_reactivity")
runExample("04_mpg")
runExample("05_sliders")
runExample("06_tabsets")
runExample("07_widgets")
runExample("08_html")
runExample("09_upload")
runExample("10_download")
runExample("11_timer")
runApp('app')
runApp('app')
# Define UI for app that draws a histogram ----
ui <- fluidPage(
titlePanel("title panel"),
sidebarLayout(position='Right'
sidebarPanel("sidebar panel"),
runApp('app')
runApp('app')
runApp('app')
install.packages(c("maps", "mapproj"))
library(maps)
library(mapproj)
source("census-app/helpers.R")
library(maps)
library(mapproj)
source("census-app/helpers.R")
getwd()
ls
dir()
library(maps)
library(mapproj)
source("census-app/helpers.R")
library(maps)
library(mapproj)
source("census-app/helpers.R")
library(maps)
library(mapproj)
source("census-app/helpers.R")
getwd()
cd ..
cd('..')
cd '..'
setwd('..')
getwd()
library(maps)
library(mapproj)
source("census-app/helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
runApp('census-app')
setwd('census-app/')
runApp()
getwd()
setwd('..')
runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
runApp('census-app')
power_plot(sim_n=1)
power_plot = function(n_per_group = 50, min_es = 0.0, max_es=0.8, es_steps=30, sim_n = 100){
#Sample size
# n_per_group <- 50
#
# pop_es <- seq(from = 0, to = 0.8, length.out = 30) #creates sequences of numbers.
#
#Container power
print('Generating plot:')
powerValue <- NULL
for(es in pop_es){
#Container pvalues
pvalues <- NULL
for(i in 1:sim_n){
group1 <- rnorm(n = n_per_group, mean = 0, sd = 1)
group2 <- rnorm(n = n_per_group, mean = es, sd = 1)
score <- c(group1, group2)
groupID <- rep(c("gr1", "gr2"), each = n_per_group)
MyData <- data.frame(groupID, score)
t_model <- t.test(score ~ groupID, data = MyData)
pvalues <- c(pvalues, tidy(t_model)$p.value[1])
}
#Power
powerValue <- c(powerValue, sum(pvalues <= 0.05)/length(pvalues))
}
MyDataPower <- data.frame(pop_es, powerValue)
#Plot
plot = ggplot(MyDataPower, aes(x=pop_es, y=powerValue)) +
geom_line() +
xlab("Effect Sizes")+
ylab("Power")+
theme_bw() +
geom_hline(yintercept= 0.8, linetype="dashed", color = "red") +
ggtitle("Power Curve for an Independent Sample t-test (n per group: 50)")
}
power_plot(sim_n=1)
power_plot(sim_n=1)
power_plot(sim_n=10)
library(tidyverse)
library(broom)
power_plot = function(n_per_group = 50, min_es = 0.0, max_es=0.8, es_steps=30, sim_n = 100){
#Sample size
# n_per_group <- 50
#
# pop_es <- seq(from = 0, to = 0.8, length.out = 30) #creates sequences of numbers.
#
#Container power
print('Generating plot:')
powerValue <- NULL
for(es in pop_es){
#Container pvalues
pvalues <- NULL
for(i in 1:sim_n){
group1 <- rnorm(n = n_per_group, mean = 0, sd = 1)
group2 <- rnorm(n = n_per_group, mean = es, sd = 1)
score <- c(group1, group2)
groupID <- rep(c("gr1", "gr2"), each = n_per_group)
MyData <- data.frame(groupID, score)
t_model <- t.test(score ~ groupID, data = MyData)
pvalues <- c(pvalues, tidy(t_model)$p.value[1])
}
#Power
powerValue <- c(powerValue, sum(pvalues <= 0.05)/length(pvalues))
}
MyDataPower <- data.frame(pop_es, powerValue)
#Plot
plot = ggplot(MyDataPower, aes(x=pop_es, y=powerValue)) +
geom_line() +
xlab("Effect Sizes")+
ylab("Power")+
theme_bw() +
geom_hline(yintercept= 0.8, linetype="dashed", color = "red") +
ggtitle("Power Curve for an Independent Sample t-test (n per group: 50)")
plot
}
power_plot(sim_n=10)
runApp('power_sim/app')
getwd()
setwd('power_sim/')
runApp('app')
ls
dir()
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
power_plot = function(n_per_group = 50, min_es = 0.0, max_es=0.8, es_steps=30, sim_n = 100){
#Sample size
# n_per_group <- 50
#
# pop_es <- seq(from = 0, to = 0.8, length.out = 30) #creates sequences of numbers.
#
#Container power
print('Generating plot:')
powerValue <- NULL
for(es in pop_es){
#Container pvalues
pvalues <- NULL
for(i in 1:sim_n){
group1 <- rnorm(n = n_per_group, mean = 0, sd = 1)
group2 <- rnorm(n = n_per_group, mean = es, sd = 1)
score <- c(group1, group2)
groupID <- rep(c("gr1", "gr2"), each = n_per_group)
MyData <- data.frame(groupID, score)
t_model <- t.test(score ~ groupID, data = MyData)
pvalues <- c(pvalues, tidy(t_model)$p.value[1])
}
#Power
powerValue <- c(powerValue, sum(pvalues <= 0.05)/length(pvalues))
}
MyDataPower <- data.frame(pop_es, powerValue)
#Plot
plot = ggplot(MyDataPower, aes(x=pop_es, y=powerValue)) +
geom_line() +
xlab("Effect Sizes")+
ylab("Power")+
theme_bw() +
geom_hline(yintercept= 0.8, linetype="dashed", color = "red") +
ggtitle("Power Curve for an Independent Sample t-test (n per group: 50)")
plot
}
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
# Source helper functions -----
source("power_plotter.R")
runApp('app')
power_plot()
power_plot = function(n_per_group = 50, min_es = 0.1, max_es=0.8, es_steps=30, sim_n = 100){
#Sample size
# n_per_group <- 50
#
pop_es <- seq(from = min_es, to = max_es, length.out = es_steps) #creates sequences of numbers.
#
#Container power
print('Generating plot:')
powerValue <- NULL
for(es in pop_es){
#Container pvalues
pvalues <- NULL
for(i in 1:sim_n){
group1 <- rnorm(n = n_per_group, mean = 0, sd = 1)
group2 <- rnorm(n = n_per_group, mean = es, sd = 1)
score <- c(group1, group2)
groupID <- rep(c("gr1", "gr2"), each = n_per_group)
MyData <- data.frame(groupID, score)
t_model <- t.test(score ~ groupID, data = MyData)
pvalues <- c(pvalues, tidy(t_model)$p.value[1])
}
#Power
powerValue <- c(powerValue, sum(pvalues <= 0.05)/length(pvalues))
}
MyDataPower <- data.frame(pop_es, powerValue)
#Plot
plot = ggplot(MyDataPower, aes(x=pop_es, y=powerValue)) +
geom_line() +
xlab("Effect Sizes")+
ylab("Power")+
theme_bw() +
geom_hline(yintercept= 0.8, linetype="dashed", color = "red") +
ggtitle("Power Curve for an Independent Sample t-test (n per group: 50)")
plot
}
power_plot()
power_plot()
power_plot = function(n_per_group = 50, min_es = 0.1, max_es=0.8, es_steps=30, sim_n = 100){
#Sample size
# n_per_group <- 50
#
pop_es <- seq(from = min_es, to = max_es, length.out = es_steps) #creates sequences of numbers.
#
#Container power
print('Generating plot:')
powerValue <- NULL
for(es in pop_es){
#Container pvalues
pvalues <- NULL
print(es)
for(i in 1:sim_n){
group1 <- rnorm(n = n_per_group, mean = 0, sd = 1)
group2 <- rnorm(n = n_per_group, mean = es, sd = 1)
score <- c(group1, group2)
groupID <- rep(c("gr1", "gr2"), each = n_per_group)
MyData <- data.frame(groupID, score)
t_model <- t.test(score ~ groupID, data = MyData)
pvalues <- c(pvalues, tidy(t_model)$p.value[1])
}
#Power
powerValue <- c(powerValue, sum(pvalues <= 0.05)/length(pvalues))
}
MyDataPower <- data.frame(pop_es, powerValue)
print('finished sim')
#Plot
plot = ggplot(MyDataPower, aes(x=pop_es, y=powerValue)) +
geom_line() +
xlab("Effect Sizes")+
ylab("Power")+
theme_bw() +
geom_hline(yintercept= 0.8, linetype="dashed", color = "red") +
ggtitle("Power Curve for an Independent Sample t-test (n per group: 50)")
plot
}
power_plot()
runApp('app')
shiny::runApp('app')
power_plot
power_plot()
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
runApp('app')
