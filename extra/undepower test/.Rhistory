MyData <- data.frame(groupID, score)
t_model <- t.test(score ~ groupID, data = MyData)
pvalues <- c(pvalues, tidy(t_model)$p.value[1])
# if (tidy(t_model)$p.value[1] <= 0.05){
if (TRUE){
if(tidy(t_model)$p.value[1] <= 0.001) {
p.05 = c(p.05, 0)
p.01 = c(p.01, 0)
p.001 = c(p.001, 1)
} else if (tidy(t_model)$p.value[1] <= 0.01) {
p.05 = c(p.05, 0)
p.01 = c(p.01, 1)
p.001 = c(p.001, 0)
} else if (tidy(t_model)$p.value[1] <= 0.05) {
p.05 = c(p.05, 1)
p.01 = c(p.01, 0)
p.001 = c(p.001, 0)
} else {
p.05 = c(p.05, 0)
p.01 = c(p.01, 0)
p.001 = c(p.001, 0)
}
}
}
}
#Power
powerValue <- c(powerValue, mean(pvalues))
nValue <- c(nValue, N)
maxp <- c(maxp, max(pvalues))
minp <- c(minp, min(pvalues))
pSD = c(pSD, sd(pvalues))
mean_p.05 = c(mean_p.05, mean(p.05))
mean_p.01 = c(mean_p.01, mean(p.01))
mean_p.001 = c(mean_p.001, mean(p.001))
}
overall_power = c(overall_power, powerValue)
overall_N = c(overall_N, nValue)
overall_es = c(overall_es, pop_es)
overall_min = c(overall_min, minp)
overall_max = c(overall_max, maxp)
overall_sd = c(overall_sd, pSD)
overall_p.05 = c(overall_p.05, mean_p.05)
overall_p.01 = c(overall_p.01, mean_p.01)
overall_p.001 = c(overall_p.001, mean_p.001)
}
MyDataPower <- data.frame(overall_es, overall_power, overall_N, overall_min, overall_max, overall_sd, overall_p.05, overall_p.01, overall_p.001)
MyDataPower = MyDataPower %>% group_by(overall_N)
#Plot
ggplot(MyDataPower, aes(x=overall_es, y=overall_power, color = as.factor(overall_N))) +
geom_line() +
# geom_errorbar(aes(ymin=overall_min, ymax=overall_max)) +
geom_errorbar(aes(ymin=overall_power-(overall_sd*1), ymax=overall_power+(overall_sd*1))) +
facet_wrap(~ as.factor(overall_N)) + theme(legend.position = "none") +
xlab("Effect size")+
ylab("Mean p value")+
theme_bw() +
geom_hline(yintercept= 0.05, linetype="dashed", color = "red") +
ggtitle("Significance for differencnt sample sizes vs effect sizes over 100 sims")
#Selects check trials and creates new DF with subset of columns
df_raw_check = df_raw %>%
filter(trial_condition == 'Check') %>%
select(participant, session, spreadsheet, trial_n, block_n, check_button.corr, check_button.rt) %>%
dplyr::rename(photo_set=session, group=spreadsheet, trial=trial_n, block=block_n, accuracy=check_button.corr, RT=check_button.rt) %>%
mutate(learn_half = ifelse(block <= 3, 1, 2)) %>% # Adds column to specify if first or second half of learn phase
transform(groupname= ifelse(group==1, 'Sequential', 'Non-sequential')) %>%
mutate_at(c('trial', 'block', 'accuracy', 'RT'), as.numeric) %>%
mutate_at(c('participant', 'group', 'learn_half'), as.factor) %>%
group_by(participant) %>%
filter(RT < 10, RT > 0.2) %>% # Filters out participants with RT > 10 or < 0.2
mutate(meanrt = mean(RT), stdev = sd(RT)) %>%
filter(abs((RT-meanrt)/stdev)<2) %>% # Filters out if RT is > 2 SD
ungroup()
#Selects check trials and creates new DF with subset of columns
df_raw_check = df_raw %>%
filter(trial_condition == 'Check') %>%
select(participant, session, spreadsheet, trial_n, block_n, check_button.corr, check_button.rt) %>%
dplyr::rename(photo_set=session, group=spreadsheet, trial=trial_n, block=block_n, accuracy=check_button.corr, RT=check_button.rt) %>%
mutate(learn_half = ifelse(block <= 3, 1, 2)) %>% # Adds column to specify if first or second half of learn phase
transform(groupname= ifelse(group==1, 'Sequential', 'Non-sequential')) %>%
mutate_at(c('trial', 'block', 'accuracy', 'RT'), as.numeric) %>%
mutate_at(c('participant', 'group', 'learn_half'), as.factor) %>%
group_by(participant) %>%
filter(RT < 10, RT > 0.2) %>% # Filters out participants with RT > 10 or < 0.2
mutate(meanrt = mean(RT), stdev = sd(RT)) %>%
filter(abs((RT-meanrt)/stdev)<2) %>% # Filters out if RT is > 2 SD
ungroup()
library("rstudioapi")
library(tidyverse)
library(ggplot2)
library("openxlsx")
library("plotrix")
library("scales")
library("ggpubr")
library("broom")
library("car")
library("rstatix")
library(gridExtra)
theme_set(theme_classic())
# Sets working directory to current folder and reads in all csv files into one df
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
df_raw = list.files(path = ".", pattern = "*.csv") %>%
map_df(~read_csv(., show_col_types = FALSE) %>%
mutate(across(everything(), as.character))
)
#Selects check trials and creates new DF with subset of columns
df_raw_check = df_raw %>%
filter(trial_condition == 'Check') %>%
select(participant, session, spreadsheet, trial_n, block_n, check_button.corr, check_button.rt) %>%
dplyr::rename(photo_set=session, group=spreadsheet, trial=trial_n, block=block_n, accuracy=check_button.corr, RT=check_button.rt) %>%
mutate(learn_half = ifelse(block <= 3, 1, 2)) %>% # Adds column to specify if first or second half of learn phase
transform(groupname= ifelse(group==1, 'Sequential', 'Non-sequential')) %>%
mutate_at(c('trial', 'block', 'accuracy', 'RT'), as.numeric) %>%
mutate_at(c('participant', 'group', 'learn_half'), as.factor) %>%
group_by(participant) %>%
filter(RT < 10, RT > 0.2) %>% # Filters out participants with RT > 10 or < 0.2
mutate(meanrt = mean(RT), stdev = sd(RT)) %>%
filter(abs((RT-meanrt)/stdev)<2) %>% # Filters out if RT is > 2 SD
ungroup()
# Aggregates the check data
# Creates summary of RT scores on correct trials for both mean and median
df_check_RT = df_raw_check %>%
group_by(participant,group, groupname, learn_half) %>%
filter(accuracy == 1) %>%
summarise(mean_RT=mean(RT), se_RT=std.error(RT), median_RT=median(RT), IQR_RT=IQR(RT))
# Creates summary of mean accuracy and merge with RT
df_check = df_raw_check %>%
group_by(participant,group, groupname) %>%
summarise(mean_accuracy=mean(accuracy), se_accuracy=std.error(accuracy), sd_accuracy=sd(accuracy)) %>%
merge(df_check_RT) %>%
arrange(group, participant)
#for report write-up purposes
df_check_info = df_check %>%
group_by(groupname) %>%
summarise(med=mean(median_RT))
# Selects test trials and creates new DF with subset of columns
df_raw_test = df_raw %>%
filter(trial_condition == 'test') %>%
select(participant, session, spreadsheet, trial_n, block_n, centre_distance, test_button.corr, test_button.rt) %>%
dplyr::rename(photo_set=session, group=spreadsheet, trial=trial_n, block=block_n, distance=centre_distance, accuracy=test_button.corr, RT=test_button.rt)  %>%
transform(groupname= ifelse(group==1, 'Sequential', 'Non-sequential')) %>%
mutate_at(c('trial', 'block', 'accuracy', 'RT'), as.numeric) %>%
mutate_at(c('participant', 'group', 'distance'), as.factor) %>%
group_by(participant) %>%
filter(RT < 10, RT > 0.2) %>% # Filters out participants with RT > 10 or < 0.2
mutate(meanrt = mean(RT), stdev = sd(RT)) %>%
filter(abs((RT-meanrt)/stdev)<2) %>% # Filters out if RT is > 2 SD
ungroup()
# Aggregates the test data
#reverse data for participants who misunderstood instructions
df_raw_test = df_raw_test %>%
transform(accuracy= ifelse(participant=='1601' & accuracy==0, 1, ifelse(participant=='1601' & accuracy==1, 0, accuracy))) %>%
transform(accuracy= ifelse(participant=='2005' & accuracy==0, 1, ifelse(participant=='2005' & accuracy==1, 0, accuracy)))
# Creates summary of RT scores on correct trials for both mean and median
df_test_RT = df_raw_test %>%
group_by(participant, groupname,distance) %>%
filter(accuracy == 1 | participant == '2005') %>%
summarise(mean_RT=mean(RT), se_RT=std.error(RT), median_RT=median(RT), IQR_RT=IQR(RT))
# Creates summary of mean accuracy and merges with RT
df_test = df_raw_test %>%
group_by(participant, groupname, distance) %>%
summarise(mean_accuracy=mean(accuracy), se_accuracy=std.error(accuracy), sd_accuracy=sd(accuracy)) %>%
merge(df_test_RT)
checkAcc_aov = aov(data=df_check, mean_accuracy ~ group*learn_half)
View(df_check_RT)
View(df_raw)
View(df_raw_check)
View(df_raw)
View(df_check_RT)
#Selects check trials and creates new DF with subset of columns
df_raw_check = df_raw %>%
filter(trial_condition == 'Check') %>%
select(participant, session, spreadsheet, trial_n, block_n, check_button.corr, check_button.rt) %>%
dplyr::rename(photo_set=session, group=spreadsheet, trial=trial_n, block=block_n, accuracy=check_button.corr, RT=check_button.rt) %>%
mutate(learn_half = ifelse(block <= 3, 1, 2)) %>% # Adds column to specify if first or second half of learn phase
mutate_at(c('trial', 'block', 'accuracy', 'RT'), as.numeric) %>%
mutate_at(c('participant', 'group', 'learn_half'), as.factor) %>%
group_by(participant) %>%
filter(RT < 10, RT > 0.2) %>% # Filters out participants with RT > 10 or < 0.2
mutate(meanrt = mean(RT), stdev = sd(RT)) %>%
filter(abs((RT-meanrt)/stdev)<2) %>% # Filters out if RT is > 2 SD
ungroup()
# Aggregates the check data
# Creates summary of RT scores on correct trials for both mean and median
df_check_RT = df_raw_check %>%
group_by(participant, learn_half) %>%
filter(accuracy == 1) %>%
summarise(mean_RT=mean(RT), se_RT=std.error(RT), median_RT=median(RT), IQR_RT=IQR(RT))
# Creates summary of mean accuracy and merge with RT
df_check = df_raw_check %>%
group_by(participant) %>%
summarise(mean_accuracy=mean(accuracy), se_accuracy=std.error(accuracy), sd_accuracy=sd(accuracy)) %>%
merge(df_check_RT) %>%
arrange(participant)
#for report write-up purposes
df_check_info = df_check %>%
summarise(med=mean(median_RT))
# Selects test trials and creates new DF with subset of columns
df_raw_test = df_raw %>%
filter(trial_condition == 'test') %>%
select(participant, session, spreadsheet, trial_n, block_n, centre_distance, test_button.corr, test_button.rt) %>%
dplyr::rename(photo_set=session, group=spreadsheet, trial=trial_n, block=block_n, distance=centre_distance, accuracy=test_button.corr, RT=test_button.rt)  %>%
transform(groupname= ifelse(group==1, 'Sequential', 'Non-sequential')) %>%
mutate_at(c('trial', 'block', 'accuracy', 'RT'), as.numeric) %>%
mutate_at(c('participant', 'group', 'distance'), as.factor) %>%
group_by(participant) %>%
filter(RT < 10, RT > 0.2) %>% # Filters out participants with RT > 10 or < 0.2
mutate(meanrt = mean(RT), stdev = sd(RT)) %>%
filter(abs((RT-meanrt)/stdev)<2) %>% # Filters out if RT is > 2 SD
ungroup()
# Aggregates the test data
#reverse data for participants who misunderstood instructions
# df_raw_test = df_raw_test %>%
#   transform(accuracy= ifelse(participant=='1601' & accuracy==0, 1, ifelse(participant=='1601' & accuracy==1, 0, accuracy))) %>%
#   transform(accuracy= ifelse(participant=='2005' & accuracy==0, 1, ifelse(participant=='2005' & accuracy==1, 0, accuracy)))
# Creates summary of RT scores on correct trials for both mean and median
df_test_RT = df_raw_test %>%
group_by(participant, distance) %>%
# filter(accuracy == 1 | participant == '2005') %>%
summarise(mean_RT=mean(RT), se_RT=std.error(RT), median_RT=median(RT), IQR_RT=IQR(RT))
# Creates summary of mean accuracy and merges with RT
df_test = df_raw_test %>%
group_by(participant, distance) %>%
summarise(mean_accuracy=mean(accuracy), se_accuracy=std.error(accuracy), sd_accuracy=sd(accuracy)) %>%
merge(df_test_RT)
checkAcc_aov = aov(data=df_check, mean_accuracy ~ group*learn_half)
checkAcc_aov = aov(data=df_check, mean_accuracy ~ learn_half)
check_meanAcc_plot = ggplot(df_check, aes(y=mean_accuracy, x=fct_inorder(groupname), fill=factor(group)))+
geom_bar(position='dodge', stat = "summary", fun.data = mean_se, width=0.8) +
geom_errorbar(aes(ymin=mean_accuracy-se_accuracy, ymax=mean_accuracy+se_accuracy), stat="summary", width=.2, position=position_dodge(0.8)) +
theme(aspect.ratio=4/3, axis.title.x = element_blank()) +
labs(y="Mean accuracy", fill = "Learning Stage") +
scale_fill_manual(values=c('grey72', 'grey87','grey38', 'grey53')) +
scale_y_continuous(expand = expansion(mult = c(0, .1)))
#tests for normality
df_check %>%
group_by(groupname) %>%
mutate_at('mean_accuracy', as.numeric) %>%
do(tidy(shapiro.test(.$mean_accuracy)))
#tests for normality
df_check %>%
mutate_at('mean_accuracy', as.numeric) %>%
do(tidy(shapiro.test(.$mean_accuracy)))
df_check %>%
group_by(groupname) %>%
summarize(mean_accuracy = mean(mean_accuracy), SD_acc = (mean(_accuracy)))
#tests for normality
df_check %>%
mutate_at('mean_accuracy', as.numeric) %>%
do(tidy(shapiro.test(.$mean_accuracy)))
df_check %>%
summarize(mean_accuracy = mean(mean_accuracy), SD_acc = (mean(_accuracy)))
#tests for normality
df_check %>%
mutate_at('mean_accuracy', as.numeric) %>%
do(tidy(shapiro.test(.$mean_accuracy)))
df_check %>%
summarize(mean_accuracy = mean(mean_accuracy), SD_acc = (mean_accuracy)))
#tests for normality
df_check %>%
mutate_at('mean_accuracy', as.numeric) %>%
do(tidy(shapiro.test(.$mean_accuracy)))
df_check %>%
summarize(mean_accuracy = mean(mean_accuracy), SD_acc = (mean_accuracy))
#group effect
wilcox.test(mean_accuracy, df_check)
#group effect
t.test.test(mean_accuracy, df_check)
#group effect
t.test(mean_accuracy, df_check)
df_check %>%
summarize(mean_accuracy = mean(mean_accuracy), SD_acc = (mean_accuracy))
#group effect
t.test(mean_accuracy~partivcipant, df_check)
#group effect
t.test(mean_accuracy~participant, df_check)
#group effect
t.test(mean_accuracy, df_check)
#group effect
t.test(data = df_check,  mean_accuracy, df_check)
#group effect
t.test(data = df_check$mean_accuracy, df_check)
#group effect
t.test(df_check$mean_accuracy~learn_bhalf, df_check)
#group effect
t.test(df_check$mean_accuracy~learn_half, df_check)
View(df_check)
checkAcc_aov = aov(data=df_check, mean_accuracy ~ learn_half)
check_meanAcc_plot = ggplot(df_check, aes(y=mean_accuracy, x=fct_inorder(groupname), fill=factor(group)))+
geom_bar(position='dodge', stat = "summary", fun.data = mean_se, width=0.8) +
geom_errorbar(aes(ymin=mean_accuracy-se_accuracy, ymax=mean_accuracy+se_accuracy), stat="summary", width=.2, position=position_dodge(0.8)) +
theme(aspect.ratio=4/3, axis.title.x = element_blank()) +
labs(y="Mean accuracy", fill = "Learning Stage") +
scale_fill_manual(values=c('grey72', 'grey87','grey38', 'grey53')) +
scale_y_continuous(expand = expansion(mult = c(0, .1)))
check_meanAcc_plot
check_meanAcc_plot = ggplot(df_check, aes(y=mean_accuracy, x=fct_inorder(learn_half), fill=factor(learn_half)))+
geom_bar(position='dodge', stat = "summary", fun.data = mean_se, width=0.8) +
geom_errorbar(aes(ymin=mean_accuracy-se_accuracy, ymax=mean_accuracy+se_accuracy), stat="summary", width=.2, position=position_dodge(0.8)) +
theme(aspect.ratio=4/3, axis.title.x = element_blank()) +
labs(y="Mean accuracy", fill = "Learning Stage") +
scale_fill_manual(values=c('grey72', 'grey87','grey38', 'grey53')) +
scale_y_continuous(expand = expansion(mult = c(0, .1)))
check_meanAcc_plot
View(df_raw_check)
# add distance = overall to the mean stats
df_test_plot_ov_mean = df_raw_test %>%
group_by(participant, distance) %>%
summarise(median_RT=median(RT), IQR_RT=IQR(RT), mean_accuracy=mean(accuracy), SD_accuracy=sd(accuracy)) %>%
mutate(distance='Overall')
df_test_plot = df_raw_test %>%
filter(accuracy == 1) %>%
group_by(participant,  distance) %>%
summarise(median_RT=median(RT), IQR_RT=IQR(RT), mean_accuracy=mean(accuracy), SD_accuracy=sd(accuracy)) %>%
rbind(df_test_plot_ov_mean)
df_test_plot = df_test %>%
group_by(participant,  distance) %>%
mutate(participant = as.factor(participant), groupname=as.factor(groupname), distance=as.factor(distance))
df_test_plot = df_test %>%
group_by(participant,  distance) %>%
mutate(participant = as.factor(participant), distance=as.factor(distance))
df_test_plot_seq = df_test %>%
group_by(participant, distance) %>%
mutate(participant = as.factor(participant), distance=as.factor(distance))
df_test_plot_distance = df_test %>%
group_by(participant, distance) %>%
mutate(participant = as.factor(participant), distance=as.factor(distance)) %>%
transform(alphagroup= 1)
```{r}
colsfull=cols=c('blue3', 'darkorchid3', 'violetred2', 'black')
median_RT_plot = ggplot(df_test_plot, aes(y=median_RT, x=fct_inorder(groupname)), position=position_dodge(2)) +
geom_violin(aes(colour=distance, alpha=factor(alphagroup)), position = position_dodge(1)) +
stat_summary(fun.data = 'mean_se', aes(colour=distance, alpha=factor(alphagroup)), position = position_dodge(1)) +
geom_jitter(aes(colour=distance, alpha=factor(alphagroup)), shape=16, position = position_dodge(1)) +
theme(axis.title.x = element_blank()) +
labs(x="Group", y="Median reaction time (test phase) (s)", color='Distance') +
scale_color_manual(values=colsfull, labels=c('Close', 'Medium', 'Far', 'Overall')) +
scale_alpha_manual(values = c("0.7"=0.5, "1"=1), guide='none')
test_medianRT_aov = aov(data=df_test_plot, median_RT ~ distance*groupname)
test_medianRT_aov = aov(data=df_test_plot, median_RT ~ distance)
summary(test_medianRT_aov)
#for report write-up purposes
df_test_plot_info = df_test_plot %>%
group_by(participant, groupname,distance) %>%
summarise(mean=mean(median_RT))
median_RT_plot = ggplot(df_test_plot, aes(y=median_RT, x=fct_inorder(distance)), position=position_dodge(2)) +
geom_violin(aes(colour=distance), position = position_dodge(1)) +
stat_summary(fun.data = 'mean_se', aes(colour=distance, alpha=factor(alphagroup)), position = position_dodge(1)) +
geom_jitter(aes(colour=distance, alpha=factor(alphagroup)), shape=16, position = position_dodge(1)) +
theme(axis.title.x = element_blank())
median_RT_plot_distance
median_RT_plot
median_RT_plot = ggplot(df_test_plot, aes(y=median_RT, x=fct_inorder(distance)), position=position_dodge(2)) +
geom_violin(aes(colour=distance), position = position_dodge(1)) +
stat_summary(fun.data = 'mean_se', aes(colour=distance), position = position_dodge(1)) +
geom_jitter(aes(colour=distance, alpha=factor(alphagroup)), shape=16, position = position_dodge(1)) +
theme(axis.title.x = element_blank())
median_RT_plot
median_RT_plot = ggplot(df_test_plot, aes(y=median_RT, x=fct_inorder(distance)), position=position_dodge(2)) +
geom_violin(aes(colour=distance), position = position_dodge(1)) +
stat_summary(fun.data = 'mean_se', aes(colour=distance), position = position_dodge(1)) +
geom_jitter(aes(colour=distance), shape=16, position = position_dodge(1)) +
theme(axis.title.x = element_blank())
median_RT_plot
#tests for normality
df_test_plot %>%
group_by(distance) %>%
mutate_at('median_RT', as.numeric) %>%
do(tidy(shapiro.test(.$median_RT)))
#non-parametric anova equivalents
summary(test_medianRT_aov)
pairwise.t.test(df_test$median_RT, df_test$distance,
p.adjust.method = "bonf"
)
df_test %>%
group_by(distance) %>%
summarize(RT = mean(median_RT), RT_sd = sd(median_RT))
df_test_plot %>%
group_by(distance) %>%
mutate_at('mean_accuracy', as.numeric) %>%
do(tidy(shapiro.test(.$mean_accuracy)))
df_test_plot %>%
group_by(distance) %>%
summarize(Accuracy = mean(mean_accuracy), Accuracy_sd = sd(mean_accuracy))
boop = aov(data=df_test_plot, mean_accuracy ~ distance)
summary(boop)
pairwise.t.test(df_test$mean_accuracy, df_test$distance,
p.adjust.method = "bonf"
)
df_test_aov = df_test_plot
#tests for normality
df_test_aov %>%
group_by(groupname, distance) %>%
mutate_at('mean_accuracy', as.numeric) %>%
do(tidy(shapiro.test(.$mean_accuracy)))
#tests for normality
df_test_aov %>%
group_by(distance) %>%
mutate_at('mean_accuracy', as.numeric) %>%
do(tidy(shapiro.test(.$mean_accuracy)))
df_aov_seq= df_test_aov %>%
filter(groupname == 'Sequential')
barcolsfull=cols=c('navy', 'darkmagenta', 'deeppink3', 'black')
plot_acc= ggplot(df_test_plot, aes(y=mean_accuracy, fill=distance))  +
geom_bar(aes(), position='dodge', stat = "summary", fun= "mean") +
geom_errorbar(aes(ymin=mean_accuracy-se_accuracy, ymax=mean_accuracy+se_accuracy), stat="summary", width=.2, position=position_dodge(.9)) +
theme(axis.title.x = element_blank()) +
labs(y="Mean accuracy (test phase)", fill= "Distance") +
scale_fill_manual(values=barcolsfull, labels=c('Close', 'Medium', 'Far', 'Overall')) +
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
scale_alpha_manual(values = c("0.7"=0.7, "1"=1), guide='none')
plot_acc
plot_acc= ggplot(df_test_plot, aes(y=mean_accuracy, fill=distance))  +
geom_bar(aes(), position='dodge', stat = "summary", fun= "mean") +
geom_errorbar(aes(ymin=mean_accuracy-se_accuracy, ymax=mean_accuracy+se_accuracy), stat="summary", width=.2, position=position_dodge(.9)) +
theme(axis.title.x = element_blank()) +
labs(y="Mean accuracy (test phase)", fill= "Distance") +
scale_fill_manual(values=barcolsfull, labels=c('Close', 'Medium', 'Far', 'Overall')) +
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
scale_alpha_manual(values = c("0.7"=0.7, "1"=1), guide='none')
plot_acc
plot_acc= ggplot(df_test_plot, aes(y=mean_accuracy, fill=distance))  +
geom_bar(aes(), position='dodge', stat = "summary", fun= "mean") +
geom_errorbar(aes(ymin=mean_accuracy-se_accuracy, ymax=mean_accuracy+se_accuracy), stat="summary", width=.2, position=position_dodge(.9)) +
theme(axis.title.x = element_blank()) +
labs(y="Mean accuracy (test phase)", fill= "Distance") +
scale_fill_manual(values=barcolsfull, labels=c('Close', 'Medium', 'Far', 'Overall'))
plot_acc
plot_acc= ggplot(df_test_plot, aes(y=mean_accuracy, fill=distance))  +
geom_bar(aes(x=distance), position='dodge', stat = "summary", fun= "mean") +
geom_errorbar(aes(ymin=mean_accuracy-se_accuracy, ymax=mean_accuracy+se_accuracy), stat="summary", width=.2, position=position_dodge(.9)) +
theme(axis.title.x = element_blank()) +
labs(y="Mean accuracy (test phase)", fill= "Distance") +
scale_fill_manual(values=barcolsfull, labels=c('Close', 'Medium', 'Far', 'Overall'))
plot_acc
plot_acc= ggplot(df_test_plot, aes(y=mean_accuracy, x=distance, fill=distance))  +
geom_bar(aes(x=distance), position='dodge', stat = "summary", fun= "mean") +
geom_errorbar(aes(ymin=mean_accuracy-se_accuracy, ymax=mean_accuracy+se_accuracy), stat="summary", width=.2, position=position_dodge(.9)) +
theme(axis.title.x = element_blank()) +
labs(y="Mean accuracy (test phase)", fill= "Distance") +
scale_fill_manual(values=barcolsfull, labels=c('Close', 'Medium', 'Far', 'Overall'))
plot_acc
#Selects check trials and creates new DF with subset of columns
df_raw_check = df_raw %>%
filter(trial_condition == 'Check') %>%
select(participant, session, spreadsheet, trial_n, block_n, check_button.corr, check_button.rt) %>%
dplyr::rename(photo_set=session, group=spreadsheet, trial=trial_n, block=block_n, accuracy=check_button.corr, RT=check_button.rt) %>%
mutate(learn_half = ifelse(block <= 3, 1, 2)) %>% # Adds column to specify if first or second half of learn phase
mutate_at(c('trial', 'block', 'accuracy', 'RT'), as.numeric) %>%
mutate_at(c('participant', 'group', 'learn_half'), as.factor) %>%
group_by(participant) %>%
filter(RT < 10, RT > 0.2) %>% # Filters out participants with RT > 10 or < 0.2
mutate(meanrt = mean(RT), stdev = sd(RT)) %>%
filter(abs((RT-meanrt)/stdev)<2) %>% # Filters out if RT is > 2 SD
ungroup()
# Aggregates the check data
# Creates summary of RT scores on correct trials for both mean and median
df_check_RT = df_raw_check %>%
group_by(participant, learn_half) %>%
filter(accuracy == 1) %>%
summarise(mean_RT=mean(RT), se_RT=std.error(RT), median_RT=median(RT), IQR_RT=IQR(RT))
# Creates summary of mean accuracy and merge with RT
df_check = df_raw_check %>%
group_by(participant) %>%
summarise(mean_accuracy=mean(accuracy), se_accuracy=std.error(accuracy), sd_accuracy=sd(accuracy)) %>%
merge(df_check_RT) %>%
arrange(participant)
#for report write-up purposes
df_check_info = df_check %>%
summarise(med=mean(median_RT))
# Selects test trials and creates new DF with subset of columns
df_raw_test = df_raw %>%
filter(trial_condition == 'test') %>%
select(participant, session, spreadsheet, trial_n, block_n, centre_distance, test_button.corr, test_button.rt) %>%
dplyr::rename(photo_set=session, group=spreadsheet, trial=trial_n, block=block_n, distance=centre_distance, accuracy=test_button.corr, RT=test_button.rt)  %>%
transform(groupname= ifelse(group==1, 'Sequential', 'Non-sequential')) %>%
mutate_at(c('trial', 'block', 'accuracy', 'RT'), as.numeric) %>%
mutate_at(c('participant', 'group', 'distance'), as.factor) %>%
group_by(participant) %>%
filter(RT < 10, RT > 0.2) %>% # Filters out participants with RT > 10 or < 0.2
mutate(meanrt = mean(RT), stdev = sd(RT)) %>%
filter(abs((RT-meanrt)/stdev)<2) %>% # Filters out if RT is > 2 SD
ungroup()
# Creates summary of RT scores on correct trials for both mean and median
df_test_RT = df_raw_test %>%
group_by(participant, distance) %>%
# filter(accuracy == 1 | participant == '2005') %>%
summarise(mean_RT=mean(RT), se_RT=std.error(RT), median_RT=median(RT), IQR_RT=IQR(RT))
# Creates summary of mean accuracy and merges with RT
df_test = df_raw_test %>%
group_by(participant, distance) %>%
summarise(mean_accuracy=mean(accuracy), se_accuracy=std.error(accuracy), sd_accuracy=sd(accuracy)) %>%
merge(df_test_RT)
library("rstudioapi")
library(tidyverse)
library(ggplot2)
library("openxlsx")
library("plotrix")
library("scales")
library("ggpubr")
library("broom")
library("car")
library("rstatix")
library(gridExtra)
theme_set(theme_classic())
# Sets working directory to current folder and reads in all csv files into one df
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
df_raw = list.files(path = ".", pattern = "*.csv") %>%
map_df(~read_csv(., show_col_types = FALSE) %>%
mutate(across(everything(), as.character))
)
